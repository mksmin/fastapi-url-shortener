name: Python checks 🐍

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    paths:
      - ".github/workflows/**"
      - "url-shortener/**"

jobs:
  run-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install Black
        run: |
          python -m pip install --upgrade pip
          pip install "black==25.1.0"

      - name: Black
        run: black --check --diff ./

      - name: Install poetry
        run: |
          export POETRY_HOME=/opt/poetry
          python3 -m venv $POETRY_HOME
          export PATH="$POETRY_HOME/bin:$PATH"
          pip install poetry==2.1.4
          echo "$POETRY_HOME/bin" >> $GITHUB_PATH

      - name: Poetry config disable virtual environments
        run: |
          poetry config  virtualenvs.create false


      - name: Install dependencies
        run: |
          poetry sync --no-root --no-interaction --no-ansi

      - name: Run ruff check --diff
        uses: astral-sh/ruff-action@v3
        with:
          args: 'check --diff'
          version-file: 'pyproject.toml'

      - name: Run ruff check
        uses: astral-sh/ruff-action@v3
        with:
          version-file: 'pyproject.toml'

      - name: Run mypy
        run: mypy url-shortener

  run-tests:
    runs-on: ubuntu-latest
    needs:
      - run-checks
    services:
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install poetry
        run: |
          export POETRY_HOME=/opt/poetry
          python3 -m venv $POETRY_HOME
          export PATH="$POETRY_HOME/bin:$PATH"
          pip install poetry==2.1.4
          echo "$POETRY_HOME/bin" >> $GITHUB_PATH

      - name: Poetry config disable virtual environments
        run: |
          poetry config  virtualenvs.create false

      - name: Install dependencies
        run: poetry sync --no-root --no-interaction --no-ansi

      - name: Run python tests
        run: poetry run pytest url-shortener --cov=url-shortener --cov-report=xml:coverage.xml --cov-report=json:coverage.json
        env:
          TESTING: 1
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage.xml
            coverage.json
          retention-days: 1

  update-coverage-badge:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:
      - run-tests

    steps:
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Prepare coverage percentage
        run: |
          export EXTRACTED_COVERAGE=$(python -c 'import json;print(json.load(open("coverage.json"))["totals"]["percent_covered_display"])')
          echo "TOTAL_COVERAGE=$EXTRACTED_COVERAGE" >> $GITHUB_ENV
          echo "### Tests coverage: ${EXTRACTED_COVERAGE}%" >> $GITHUB_STEP_SUMMARY

      - name: Update coverage badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: 9bc241efd7dd3fad3aa8cca351e6b2d2
          filename: coverage.json
          label: Coverage
          message: ${{ env.TOTAL_COVERAGE }}%
          valColorRange: ${{ env.TOTAL_COVERAGE }}
          minColorRange: 70
          maxColorRange: 90

  upload-to-codecov:
    runs-on: ubuntu-latest
    needs:
      - run-tests
    steps:
      - uses: actions/checkout@v4

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        if: ${{ !env.ACT }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          fail_ci_if_error: 'true'
